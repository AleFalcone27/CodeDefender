import pygame
import random
from pygame.locals import *

# Initialize Pygame
pygame.init()

# Set up the display window
screen_width, screen_height = 800, 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Enemy Shooter")

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)

# Player properties
player_size = 40
player_x, player_y = screen_width // 2 - player_size // 2, screen_height // 2 - player_size // 2
player_vel = 5

# Bullet properties
bullet_size = 10
bullet_vel = 10
bullets = []

# Enemy properties
enemy_size = 30
enemy_vel = 3
enemies = []

# Function to create a new enemy
def create_enemy():
    side = random.randint(1, 4)
    if side == 1:  # Top
        x = random.randint(0, screen_width - enemy_size)
        y = -enemy_size
    elif side == 2:  # Right
        x = screen_width
        y = random.randint(0, screen_height - enemy_size)
    elif side == 3:  # Bottom
        x = random.randint(0, screen_width - enemy_size)
        y = screen_height
    else:  # Left
        x = -enemy_size
        y = random.randint(0, screen_height - enemy_size)
    enemies.append(pygame.Rect(x, y, enemy_size, enemy_size))

# Game loop
running = True
clock = pygame.time.Clock()

while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == QUIT:
            running = False
        elif event.type == KEYDOWN:
            if event.key == K_ESCAPE:
                running = False
        elif event.type == MOUSEBUTTONDOWN:
            bullet_x = player_x + player_size // 2 - bullet_size // 2
            bullet_y = player_y + player_size // 2 - bullet_size // 2
            mouse_x, mouse_y = pygame.mouse.get_pos()
            bullet_dir_x = mouse_x - bullet_x
            bullet_dir_y = mouse_y - bullet_y
            bullet_dir_length = max(abs(bullet_dir_x), abs(bullet_dir_y))
            bullet_dir_x /= bullet_dir_length
            bullet_dir_y /= bullet_dir_length
            bullets.append((bullet_x, bullet_y, bullet_dir_x, bullet_dir_y))

    # Move the player
    keys = pygame.key.get_pressed()
    if keys[K_a] and player_x > 0:
        player_x -= player_vel
    if keys[K_d] and player_x < screen_width - player_size:
        player_x += player_vel
    if keys[K_w] and player_y > 0:
        player_y -= player_vel
    if keys[K_s] and player_y < screen_height - player_size:
        player_y += player_vel

    # Move the bullets
    bullets_to_remove = []
    for i, bullet in enumerate(bullets):
        bullet_x, bullet_y, bullet_dir_x, bullet_dir_y = bullet
        bullet_x += bullet_dir_x * bullet_vel
        bullet_y += bullet_dir_y * bullet_vel
        if bullet_x < 0 or bullet_x > screen_width or bullet_y < 0 or bullet_y > screen_height:
            bullets_to_remove.append(i)
        else:
            bullets[i] = (bullet_x, bullet_y, bullet_dir_x, bullet_dir_y)

    # Remove bullets that have gone off-screen
    for i in reversed(bullets_to_remove):
        bullets.pop(i)

    # Move the enemies
    for enemy in enemies:
        if enemy.x < player_x:
            enemy.x += enemy_vel -2
        elif enemy.x > player_x:
            enemy.x -= enemy_vel -2
        if enemy.y < player_y:
            enemy.y += enemy_vel -2
        elif enemy.y > player_y:
            enemy.y -= enemy_vel -2

    # Check collision between bullets and enemies
    bullets_to_remove = []
    for i, bullet in enumerate(bullets):
        bullet_x, bullet_y, _, _ = bullet
        bullet_rect = pygame.Rect(bullet_x, bullet_y, bullet_size, bullet_size)
        for j, enemy in enumerate(enemies):
            if bullet_rect.colliderect(enemy):
                bullets_to_remove.append(i)
                enemies.pop(j)
                break

    # Remove bullets and enemies that have collided
    for i in reversed(bullets_to_remove):
        bullets.pop(i)

    # Check collision between player and enemies
    player_rect = pygame.Rect(player_x, player_y, player_size, player_size)
    for enemy in enemies:
        if player_rect.colliderect(enemy):
            running = False  # Game over if player collides with an enemy

    # Generate new enemies
    if len(enemies) < 5:
        create_enemy()

    # Draw the game
    screen.fill(WHITE)
    pygame.draw.rect(screen, BLUE, (player_x, player_y, player_size, player_size))
    for bullet in bullets:
        pygame.draw.rect(screen, RED, bullet[:2] + (bullet_size, bullet_size))
    for enemy in enemies:
        pygame.draw.rect(screen, RED, enemy)
    pygame.display.flip()

    # Control the frame rate
    clock.tick(60)

# Quit the game
pygame.quit()
